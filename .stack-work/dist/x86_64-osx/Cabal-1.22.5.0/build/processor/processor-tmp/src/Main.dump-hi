
==================== FINAL INTERFACE ====================
2016-03-31 16:12:01.053552 UTC

interface main@main:Main 7103
  interface hash: 6711987bd4d4ad8c381da93ab5e57ce5
  ABI hash: e14c717b6ea250d596a980dbb3e0e995
  export-list hash: 060fd2272ccf014ee5fc44894b99f405
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0230b71dfa54082ff4efe59ea5fb82a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      blaze-builder-0.4.0.1@blaze_4KI2nf4lf9oHEgXiILyTYj
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      cassava-0.4.5.0@cassa_CbkGMq7xMNeGry9A8Mq7HV
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      scientific-0.3.4.6@scien_5s26qRhE5w04kI4pP1Rtwm
                      split-0.2.3@split_CDzOynTh4l8Ahg1HaWUL4Z
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.ByteString.Char8
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.Internal.Types
                         base-4.8.2.0:Control.Applicative base-4.8.2.0:Data.Either
                         base-4.8.2.0:Data.Functor.Identity base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:Data.Void
                         base-4.8.2.0:GHC.Exts base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Base
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO e7c9ddd0b9319c17e6733109efa94847
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Lazy 9c2dd9a3ab1c17d5026a1c481c7a8877
import  -/  cassava-0.4.5.0@cassa_CbkGMq7xMNeGry9A8Mq7HV:Data.Csv.Streaming e7708d23e89576dc51e776f813e51b61
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  split-0.2.3@split_CDzOynTh4l8Ahg1HaWUL4Z:Data.List.Split 0ce5c537605fc9ad887ec02865b54394
import  -/  split-0.2.3@split_CDzOynTh4l8Ahg1HaWUL4Z:Data.List.Split.Internals 963ae3cccb2c92e36d269de482ab8341
2969ed21a7ab91470e18227741d7d217
  $fShowColumnStat :: GHC.Show.Show (Main.ColumnStat a)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Main.ColumnStat a)
                  (Main.$fShowColumnStat_$cshowsPrec @ a)
                  (Main.$fShowColumnStat_$cshow @ a)
                  (Main.$fShowColumnStat_$cshowList @ a) -}
2969ed21a7ab91470e18227741d7d217
  $fShowColumnStat1 :: Main.ColumnStat a -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ @ a w :: Main.ColumnStat a ->
                 Main.$w$cshowsPrec @ a 0 w) -}
2969ed21a7ab91470e18227741d7d217
  $fShowColumnStat_$cshow :: Main.ColumnStat a -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a x :: Main.ColumnStat a ->
                 Main.$fShowColumnStat_$cshowsPrec
                   @ a
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2969ed21a7ab91470e18227741d7d217
  $fShowColumnStat_$cshowList ::
    [Main.ColumnStat a] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ @ a ->
                 GHC.Show.showList__
                   @ (Main.ColumnStat a)
                   (Main.$fShowColumnStat1 @ a)) -}
2969ed21a7ab91470e18227741d7d217
  $fShowColumnStat_$cshowsPrec ::
    GHC.Types.Int -> Main.ColumnStat a -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a w :: GHC.Types.Int w1 :: Main.ColumnStat a ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec @ a ww1 w1 }) -}
637b6ee047064274b20682d4975407c9
  $fShowHeader :: GHC.Show.Show Main.Header
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Header
                  Main.$fShowHeader_$cshowsPrec
                  Main.$fShowHeader_$cshow
                  Main.$fShowHeader_$cshowList -}
637b6ee047064274b20682d4975407c9
  $fShowHeader1 :: Main.Header -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Main.Header ->
                 case w of ww { Main.Header ww1 ww2 ww3 ww4 ->
                 Main.$w$cshowsPrec1 0 ww1 ww2 ww3 ww4 }) -}
9287ef30d886e6fb9594f536ef819df2
  $fShowHeader2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
ed385fcaa60971002448d41f76cd2f50
  $fShowHeader3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "timeOnPage = "#) -}
b840505481e710d22ff759518d46f22b
  $fShowHeader4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "latency = "#) -}
cf08cf0bd83efe90534a0ec76ae63b3c
  $fShowHeader5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "page = "#) -}
3306fa4f4daa23f3467f32a9db5deff4
  $fShowHeader6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
e3b2992ac642738d3d003a6448ed67d7
  $fShowHeader7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sessionId = "#) -}
38f2e2e41532b601ff3053257a5a53d7
  $fShowHeader8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Header {"#) -}
95eab92cc809ab1aad09fc0ad647550a
  $fShowHeader9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
8004912cfac97b687c3b1f2da8d913b6
  $fShowHeaderStats :: GHC.Show.Show Main.HeaderStats
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.HeaderStats
                  Main.$fShowHeaderStats_$cshowsPrec
                  Main.$fShowHeaderStats_$cshow
                  Main.$fShowHeaderStats_$cshowList -}
8004912cfac97b687c3b1f2da8d913b6
  $fShowHeaderStats1 :: Main.HeaderStats -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Main.HeaderStats ->
                 case w of ww { Main.HeaderStats ww1 ww2 ww3 ww4 ->
                 Main.$w$cshowsPrec2 0 ww1 ww2 ww3 ww4 }) -}
315febb47df6d6be0784829f901b0188
  $fShowHeaderStats2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "timeOnPageStats = "#) -}
ba6ab780c2e0c3ea50fc93e5248b3c56
  $fShowHeaderStats3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "latencyStats = "#) -}
8d91fff6012a8fc460e16865a241c5ab
  $fShowHeaderStats4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "pageStats = "#) -}
f40f56991941422cd5ed524ffdede1eb
  $fShowHeaderStats5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sessionIdStats = "#) -}
b886ee88fa6404c70220181e5a1ad87b
  $fShowHeaderStats6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HeaderStats {"#) -}
8004912cfac97b687c3b1f2da8d913b6
  $fShowHeaderStats_$cshow :: Main.HeaderStats -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Main.HeaderStats ->
                 Main.$fShowHeaderStats_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8004912cfac97b687c3b1f2da8d913b6
  $fShowHeaderStats_$cshowList ::
    [Main.HeaderStats] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.HeaderStats
                   Main.$fShowHeaderStats1) -}
8004912cfac97b687c3b1f2da8d913b6
  $fShowHeaderStats_$cshowsPrec ::
    GHC.Types.Int -> Main.HeaderStats -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Main.HeaderStats ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.HeaderStats ww3 ww4 ww5 ww6 ->
                 Main.$w$cshowsPrec2 ww1 ww3 ww4 ww5 ww6 } }) -}
637b6ee047064274b20682d4975407c9
  $fShowHeader_$cshow :: Main.Header -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Main.Header ->
                 Main.$fShowHeader_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
637b6ee047064274b20682d4975407c9
  $fShowHeader_$cshowList :: [Main.Header] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Header
                   Main.$fShowHeader1) -}
637b6ee047064274b20682d4975407c9
  $fShowHeader_$cshowsPrec ::
    GHC.Types.Int -> Main.Header -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Main.Header ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Header ww3 ww4 ww5 ww6 ->
                 Main.$w$cshowsPrec1 ww1 ww3 ww4 ww5 ww6 } }) -}
2969ed21a7ab91470e18227741d7d217
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Main.ColumnStat a -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
b15e35ebd5d7a56a620141cb29c3fe7a
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.Maybe GHC.Base.String
                   ww2 :: GHC.Base.Maybe GHC.Base.String
                   ww3 :: GHC.Base.Maybe GHC.Types.Double
                   ww4 :: GHC.Base.Maybe GHC.Types.Double ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ [GHC.Types.Char]
                       GHC.Show.$fShow[]_$s$fShow[]1
                       Main.$fShowHeader9
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ [GHC.Types.Char]
                       GHC.Show.$fShow[]_$s$fShow[]1
                       Main.$fShowHeader9
                       ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Double
                       GHC.Float.$fShowDouble
                       Main.$fShowHeader9
                       ww3
                 } in
                 let {
                   f3 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Double
                       GHC.Float.$fShowDouble
                       Main.$fShowHeader9
                       ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowHeader8
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowHeader7
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowHeader6
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Main.$fShowHeader5
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Main.$fShowHeader6
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Main.$fShowHeader4
                                            (f2
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Main.$fShowHeader6
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Main.$fShowHeader3
                                                     (f3
                                                        (GHC.Base.++
                                                           @ GHC.Types.Char
                                                           Main.$fShowHeader2
                                                           x))))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
839a7309f59434673dc08764b7dce521
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Main.Textual
    -> Main.Textual
    -> Main.Numeric
    -> Main.Numeric
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: Main.Textual
                   ww2 :: Main.Textual
                   ww3 :: Main.Numeric
                   ww4 :: Main.Numeric ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Main.$w$cshowsPrec @ Main.TextualKind 0 ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Main.$w$cshowsPrec @ Main.TextualKind 0 ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = Main.$w$cshowsPrec @ Main.NumericKind 0 ww3
                 } in
                 let {
                   f3 :: GHC.Base.String -> GHC.Base.String
                   = Main.$w$cshowsPrec @ Main.NumericKind 0 ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowHeaderStats6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowHeaderStats5
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowHeader6
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Main.$fShowHeaderStats4
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Main.$fShowHeader6
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Main.$fShowHeaderStats3
                                            (f2
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Main.$fShowHeader6
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Main.$fShowHeaderStats2
                                                     (f3
                                                        (GHC.Base.++
                                                           @ GHC.Types.Char
                                                           Main.$fShowHeader2
                                                           x))))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
498244759e9b84465c9a2fa4792fd747
  $wgo ::
    [[GHC.Types.Char]]
    -> Main.Textual
    -> Main.Textual
    -> Main.Numeric
    -> Main.Numeric
    -> (# Main.Textual, Main.Textual, Main.Numeric, Main.Numeric #)
  {- Arity: 5, Strictness: <S,1*U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
700f1f6f108f68f4e20fe93e0e69c9e5
  type AverageLen = GHC.Types.Double
34e52e7204666e5d32f30eff1e11f46e
  type AverageVal = GHC.Types.Double
2969ed21a7ab91470e18227741d7d217
  type role ColumnStat nominal
  data ColumnStat kind where
    Textual :: Main.Count -> Main.NullCount -> Main.ShortCount
               -> Main.LongCount -> Main.AverageLen -> ColumnStat Main.TextualKind
    Numeric :: Main.Count -> Main.NullCount -> Main.MinVal
               -> Main.MaxVal -> Main.AverageVal -> ColumnStat Main.NumericKind
1907b04bbdb5917fd3628eb5662ba64f
  type Count = GHC.Types.Int
637b6ee047064274b20682d4975407c9
  data Header
    = Header {sessionId :: GHC.Base.Maybe GHC.Base.String,
              page :: GHC.Base.Maybe GHC.Base.String,
              latency :: GHC.Base.Maybe GHC.Types.Double,
              timeOnPage :: GHC.Base.Maybe GHC.Types.Double}
8004912cfac97b687c3b1f2da8d913b6
  data HeaderStats
    = HeaderStats {sessionIdStats :: Main.Textual,
                   pageStats :: Main.Textual,
                   latencyStats :: Main.Numeric,
                   timeOnPageStats :: Main.Numeric}
179fc9379e04966e6bd0183ef25cb48d
  type LongCount = GHC.Types.Double
6211d74a53f30d4dbc6ec42372cf1183
  type MaxVal = GHC.Types.Double
873db3a30b7d246da68c96a8e045567b
  type MinVal = GHC.Types.Double
276e23078b0574d82e0a6d9adb0be031
  type NullCount = GHC.Types.Int
eb2a6f25e0ab163d14a9c75fe5912b5b
  type Numeric = Main.ColumnStat Main.NumericKind
d5376370ed11a58018aeca3b73595bd4
  data NumericKind
    Promotable
fbe3c7e07a5ca78f6d0381f028e0ce5b
  type ShortCount = GHC.Types.Double
dfab0f78e46809090377f3f1de1219c1
  type Textual = Main.ColumnStat Main.TextualKind
1593c53fc0d0d15fab33e613fcce1ad5
  data TextualKind
    Promotable
bd242baf4aa9fb8748dec4bcbc7e2ee4
  defaultNumeric :: Main.ColumnStat Main.NumericKind
  {- HasNoCafRefs,
     Unfolding: (Main.Numeric
                   @ Main.NumericKind
                   @~ <Main.NumericKind>_N
                   Main.$fShowHeader9
                   Main.$fShowHeader9
                   Main.main3
                   Main.main3
                   Main.main3) -}
653b11770d35b979482ed327d9587e90
  defaultTextual :: Main.ColumnStat Main.TextualKind
  {- HasNoCafRefs,
     Unfolding: (Main.Textual
                   @ Main.TextualKind
                   @~ <Main.TextualKind>_N
                   Main.$fShowHeader9
                   Main.$fShowHeader9
                   Main.main3
                   Main.main3
                   Main.main3) -}
ce6d11ef6081d5d5dff1b9b738ba6004
  latency :: Main.Header -> GHC.Base.Maybe GHC.Types.Double
  RecSel Main.Header
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Header ->
                 case ds of wild { Main.Header ds1 ds2 ds3 ds4 -> ds3 }) -}
8ff3aa3b7caa44fc19c50c1d99c3276c
  latencyStats :: Main.HeaderStats -> Main.Numeric
  RecSel Main.HeaderStats
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.HeaderStats ->
                 case ds of wild { Main.HeaderStats ds1 ds2 ds3 ds4 -> ds3 }) -}
e2481fdf6120861c6dc4cd7c69c19a62
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
9753a6d7697d75b0d5129646e32aef7d
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        Main.main10
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (Data.ByteString.Lazy.Internal.$fShowByteString_$cshow ipv3)
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv4 } } }) -}
f40439ae7cd3c10487adb07ec95a1cb5
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "testCSV.txt"#) -}
6b6d58e6ef851e40fee46e72b3fab866
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
0c6cafcb3d46c96db74b93286e78780f
  main2 :: GHC.Base.String
  {- Unfolding: (case Main.$wgo
                        Main.main4
                        Main.defaultTextual
                        Main.defaultTextual
                        Main.defaultNumeric
                        Main.defaultNumeric of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 Main.$w$cshowsPrec2
                   0
                   ww1
                   ww2
                   ww3
                   ww4
                   (GHC.Types.[] @ GHC.Types.Char) }) -}
b3730602959ad8f07cfcf469a21b060a
  main3 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0) -}
746600ddce57f5b3189c0025f1453f63
  main4 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.main9
                   Main.main5) -}
8b06762746eec19e28e0b002eefd2725
  main5 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.main8
                   Main.main6) -}
01c8ed9f8f02b85948da1028dcd2f2d3
  main6 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.main7
                   (GHC.Types.[] @ GHC.Base.String)) -}
53e3174ab9185e9ec948c1101b39acdb
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "cool story, dhsuadhsua, 5.2, 6.9"#) -}
6700ec4a4d1b85413d29caf2d202111d
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "AwesomeAnswer,Sup bro,321.9,321.34"#) -}
dd374b608ce251d51327d11b712b5f04
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TEST,DSA,1.0,2.1"#) -}
693aee6add2c8cd9a14c6b7e5f7cdeba
  page :: Main.Header -> GHC.Base.Maybe GHC.Base.String
  RecSel Main.Header
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Header ->
                 case ds of wild { Main.Header ds1 ds2 ds3 ds4 -> ds2 }) -}
57403296f0936ddfac8d8ce896587171
  pageStats :: Main.HeaderStats -> Main.Textual
  RecSel Main.HeaderStats
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.HeaderStats ->
                 case ds of wild { Main.HeaderStats ds1 ds2 ds3 ds4 -> ds2 }) -}
37212cf06ad804d8c06bdedc3e3807b9
  sessionId :: Main.Header -> GHC.Base.Maybe GHC.Base.String
  RecSel Main.Header
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Header ->
                 case ds of wild { Main.Header ds1 ds2 ds3 ds4 -> ds1 }) -}
a89e4d863238c5c24f1996a6426270d9
  sessionIdStats :: Main.HeaderStats -> Main.Textual
  RecSel Main.HeaderStats
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.HeaderStats ->
                 case ds of wild { Main.HeaderStats ds1 ds2 ds3 ds4 -> ds1 }) -}
9c318a258e52b0f52a4bee0d3e4f88a4
  timeOnPage :: Main.Header -> GHC.Base.Maybe GHC.Types.Double
  RecSel Main.Header
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Header ->
                 case ds of wild { Main.Header ds1 ds2 ds3 ds4 -> ds4 }) -}
20dc0ab1f4c6abe6e55d78d5a90960b8
  timeOnPageStats :: Main.HeaderStats -> Main.Numeric
  RecSel Main.HeaderStats
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.HeaderStats ->
                 case ds of wild { Main.HeaderStats ds1 ds2 ds3 ds4 -> ds4 }) -}
instance GHC.Show.Show [Main.ColumnStat] = Main.$fShowColumnStat
instance GHC.Show.Show [Main.Header] = Main.$fShowHeader
instance GHC.Show.Show [Main.HeaderStats] = Main.$fShowHeaderStats
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

